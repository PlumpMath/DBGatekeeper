/* tslint:disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v10.3.6318.21853 (NJsonSchema v8.31.6318.20479) (http://NSwag.org)
// </auto-generated>
//----------------------


export class ChecksumClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.baseUrl = baseUrl ? baseUrl : "";
        this.http = http ? http : <any>window;
    }

    post(value: any): Promise<{ [key: string] : any; }> {
        let url_ = this.baseUrl + "/api/Checksum";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(value);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processPost(_response);
        });
    }

    protected processPost(response: Response): Promise<{ [key: string] : any; }> {
        const status = response.status;
        if (status === 200) {
            return response.text().then((responseText) => {
            let result200: { [key: string] : any; } = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {};
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        result200[key] = resultData200[key] !== undefined ? resultData200[key] : <any>null;
                }
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((responseText) => {
            return throwException("An unexpected server error occurred.", status, responseText);
            });
        }
        return Promise.resolve<{ [key: string] : any; }>(<any>null);
    }
}

export class PatientClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.baseUrl = baseUrl ? baseUrl : "";
        this.http = http ? http : <any>window;
    }

    post(value: any): Promise<{ [key: string] : any; }> {
        let url_ = this.baseUrl + "/api/Patient";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(value);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processPost(_response);
        });
    }

    protected processPost(response: Response): Promise<{ [key: string] : any; }> {
        const status = response.status;
        if (status === 200) {
            return response.text().then((responseText) => {
            let result200: { [key: string] : any; } = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {};
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        result200[key] = resultData200[key] !== undefined ? resultData200[key] : <any>null;
                }
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((responseText) => {
            return throwException("An unexpected server error occurred.", status, responseText);
            });
        }
        return Promise.resolve<{ [key: string] : any; }>(<any>null);
    }
}

export class StudyClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.baseUrl = baseUrl ? baseUrl : "";
        this.http = http ? http : <any>window;
    }

    post(value: any): Promise<{ [key: string] : any; }> {
        let url_ = this.baseUrl + "/api/Study";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(value);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processPost(_response);
        });
    }

    protected processPost(response: Response): Promise<{ [key: string] : any; }> {
        const status = response.status;
        if (status === 200) {
            return response.text().then((responseText) => {
            let result200: { [key: string] : any; } = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {};
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        result200[key] = resultData200[key] !== undefined ? resultData200[key] : <any>null;
                }
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((responseText) => {
            return throwException("An unexpected server error occurred.", status, responseText);
            });
        }
        return Promise.resolve<{ [key: string] : any; }>(<any>null);
    }
}


export class SwaggerException extends Error {
    message: string;
    status: number; 
    response: string; 
    result: any; 

    constructor(message: string, status: number, response: string, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.result = result;
    }
}

function throwException(message: string, status: number, response: string, result?: any): any {
    if(result !== null && result !== undefined)
        throw result;
    else
        throw new SwaggerException(message, status, response, null);
}